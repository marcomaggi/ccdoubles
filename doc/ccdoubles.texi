\input texinfo.tex
@c %**start of header
@setfilename ccdoubles.info
@settitle CCDoubles
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      CCDoubles

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    CCDoubles

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           ccdoubles

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2014

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a
C99 language library implementing simple routines for vectors and
matrices of @code{double} and @code{double complex} values.  The package
is distributed under the terms of the @gnu{} General Public License
(@gpl{}).

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* ccdoubles: (ccdoubles).       CCDoubles.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* scalars::                     Operations on scalar numbers.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* resources::                   On--line resources.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a
C99 language library implementing simple routines for vectors and
matrices of @code{double} and @code{double complex} values.  This
library is meant to be used as companion for more sophisticated
libraries such as @acronym{CBLAS} and @acronym{LAPACKE}.

@value{PACKAGE} installs the single header file @file{ccdoubles.h}.  All
the function names in the @api{} are prefixed with @code{ccd_}; all the
constant names are prefixed with @code{CCD_}; all the type names are
prefixed with @code{ccd_} and suffixed with @code{_t}.

@menu
* overview linking::            Linking code with the library.
@end menu

@c page
@node overview linking
@section Linking code with the library


This package installs a data file for @command{pkg-config}, so when
searching for the installed library with the @gnu{} Autotools, we can:

@itemize
@item
Install the file @file{pkg.m4} from @file{/usr/share/aclocal} into the
source tree of the package, for example under @file{meta/autoconf/}.

@item
Include @file{pkg.m4} in the template by adding the following line to
@file{acinclude.m4}:

@example
m4_include(meta/autoconf/pkg.m4)
@end example

@item
Just add the following macro use to @file{configure.ac}:

@example
PKG_CHECK_MODULES([CCDOUBLES],[ccdoubles >= 0.1])
@end example

@noindent
which will set the variables @code{CCDOUBLES_LIBS} and
@code{CCDOUBLES_CFLAGS}.
@end itemize

Alternatively we can use the raw @gnu{} Autoconf macros:

@example
AC_CHECK_LIB([ccdoubles],[ccd_version_string],,
  [AC_MSG_FAILURE([test for CCDoubles library failed])])
AC_CHECK_HEADERS([ccdoubles.h],,
  [AC_MSG_FAILURE([test for CCDoubles header failed])])
@end example

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the
@gnu{} Autotools.  For an explanation of interface numbers as managed by
@gnu{} Libtool @xref{Libtool versioning, interface, Libtool's versioning
system, libtool, Shared library support for @gnu{}}.


@deftypefun {const char *} ccd_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing
the interface version number.
@end deftypefun


@deftypefun int ccd_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int ccd_version_interface_revision (void)
Return an integer representing the library interface current revision
number.
@end deftypefun


@deftypefun int ccd_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node scalars
@chapter Operations on scalar numbers


@menu
* scalars complex::             Operations on scalar complex numbers.
@end menu

@c page
@node scalars complex
@section Operations on scalar complex numbers


The C99 language standard library defines common operations on scalar
@code{double complex} numbers; in addition @value{PACKAGE} defines
convenience functions to perform the same.


@deftypefn {Preprocessor Macro} {double complex} CCDOUBLES_CPLX (double @var{REAL}, double @var{IMAG})
Build and return a new @code{double complex} value.  Expands into:

@example
(((double)(@var{REAL})) + ((double)(@var{IMAG})) * _Complex_I)
@end example

@quotation
@strong{NOTE} The latest C Language Standard defines the same operation
with the preprocessor macro @code{CMPLX(@var{REAL}, @var{IMAG})}.
@end quotation
@end deftypefn


@deftypefun {double complex} ccdoubles_cplx_mul (double complex @vari{O}, double complex @varii{O})
Even though C99 supports the multiplication operation as:

@example
#include <ccdoubles.h>

double complex  O1 = CCDOUBLES_CPLX(1.2, 3.4);
double complex  O2 = CCDOUBLES_CPLX(5.6, 7.8);
double complex  R  = O1 * O2;

printf("R = %lf%+lfi\n", creal(R), cimag(R));
@print{} R = -19.800000+28.400000i
@end example

@noindent
this function computes and returns the product between the operands.
Example:

@example
#include <ccdoubles.h>

double complex  O1 = CCDOUBLES_CPLX(1.2, 3.4);
double complex  O2 = CCDOUBLES_CPLX(5.6, 7.8);
double complex  R;

R = ccdoubles_cplx_mul(O1, O2);

printf("R = %lf%+lfi\n", creal(R), cimag(R));
@print{} R = -19.800000+28.400000i
@end example
@end deftypefun


@deftypefun {double complex} ccdoubles_cplx_div (double complex @vari{O}, double complex @varii{O})
Even though C99 supports the division operation as:

@example
#include <ccdoubles.h>

double complex  O1 = CCDOUBLES_CPLX(1.2, 3.4);
double complex  O2 = CCDOUBLES_CPLX(5.6, 7.8);
double complex  R  = O1 / O2;

printf("R = %lf%+lfi\n", creal(R), cimag(R));
@print{} R = 0.360521+0.104989i
@end example

@noindent
this function computes and returns the division between the operands.
Example:

@example
#include <ccdoubles.h>

double complex  O1 = CCDOUBLES_CPLX(1.2, 3.4);
double complex  O2 = CCDOUBLES_CPLX(5.6, 7.8);
double complex  R;

R = ccdoubles_cplx_div(O1, O2);

printf("R = %lf%+lfi\n", creal(R), cimag(R));
@print{} R = 0.360521+0.104989i
@end example
@end deftypefun


@deftypefun {double complex} ccdoubles_cplx_neg (double complex @var{O})
Even though C99 supports the negation operation as:

@example
#include <ccdoubles.h>

double complex  O = CCDOUBLES_CPLX(1.2, 3.4);
double complex  R = - O;

printf("R = %lf%+lfi\n", creal(R), cimag(R));
@print{} R = -1.200000-3.400000i
@end example

@noindent
this function computes and returns the negation of the operand.
Example:

@example
#include <ccdoubles.h>

double complex  O = CCDOUBLES_CPLX(1.2, 3.4);
double complex  R;

R = ccdoubles_cplx_neg(O);

printf("R = %lf%+lfi\n", creal(R), cimag(R));
@print{} R = -1.200000-3.400000i
@end example
@end deftypefun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node resources
@appendix On--line resources


The latest version of this package can be downloaded from:

@center @url{http://github.com/marcomaggi/@value{PACKAGE_NICKNAME}/}

@noindent
the documentation is available online:

@center @url{http://marcomaggi.github.com/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

